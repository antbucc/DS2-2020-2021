package scuttlebutt.event;

import java.io.Serializable;
import java.security.PublicKey;

/**
 * Event generated by a store and stored in the logs
 */
public class Event implements Serializable {

  private static final long serialVersionUID = 7624984782443942691L;

  /** Id of the store that generated the event */
  private PublicKey id;

  /** Hash of the content and signature of the previous event generated by the store */
  private Integer previous;

  /** Index of the event in the chain of events generated by the store */
  private int index;

  /** Content of the event */
  private Content content;

  /** Hash of the other event fields, encrypted with the store's private key */
  private String signature;


  public Event(PublicKey id, Integer previous, int index, Content content, String signature) {
    this.id = id;
    this.previous = previous;
    this.index = index;
    this.content = content;
    this.signature = signature;
  }


  public Event(PublicKey id, Integer previous, int index, Content content) {
    this.id = id;
    this.previous = previous;
    this.index = index;
    this.content = content;
  }


  public Event(Event event) {
    this(event.getId(), event.getPrevious(), event.getIndex(), event.getContent(),
        event.getSignature());
  }


  public PublicKey getId() {
    return id;
  }


  public void setId(PublicKey id) {
    this.id = id;
  }


  public Integer getPrevious() {
    return previous;
  }


  public void setPrevious(Integer previous) {
    this.previous = previous;
  }


  public int getIndex() {
    return index;
  }


  public void setIndex(int index) {
    this.index = index;
  }


  public Content getContent() {
    return content;
  }


  public void setContent(Content content) {
    this.content = content;
  }


  public String getSignature() {
    return signature;
  }


  public void setSignature(String signature) {
    this.signature = signature;
  }


  /**
   * Hash function for the variables of the event, used to compute the signature
   * 
   * @return the hash code of the event
   */
  @Override
  public int hashCode() {
    final int prime = 31;
    int result = 1;
    result = prime * result + ((content == null) ? 0 : content.hashCode());;
    result = prime * result + ((id == null) ? 0 : id.hashCode());
    result = prime * result + index;
    result = prime * result + ((previous == null) ? 0 : previous.hashCode());
    result = prime * result + ((signature == null) ? 0 : signature.hashCode());
    return result;
  }

}
