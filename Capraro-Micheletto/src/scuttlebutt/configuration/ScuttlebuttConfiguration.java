package scuttlebutt.configuration;

import java.security.NoSuchAlgorithmException;
import java.security.SecureRandom;
import repast.simphony.engine.environment.RunEnvironment;
import repast.simphony.parameter.Parameters;

/**
 * A wrapper for all configuration parameters that allows to retrieve them once at the beginning of
 * the simulation and to modify them at runtime
 */
public class ScuttlebuttConfiguration {

  /** Random number generator for cryptographic functions */
  public static SecureRandom SECURE_RANDOM;

  /** Probability that a store follows another store when it receives its heartbeat */
  public static double FOLLOW_PROBABILITY;

  /** Probability that a store unfollows another store when it receives its heartbeat */
  public static double UNFOLLOW_PROBABILITY;

  /** Probability that a store blocks another store when it receives its heartbeat */
  public static double BLOCK_PROBABILITY;

  /** Probability that a store unblocks another store when it receives its heartbeat */
  public static double UNBLOCK_PROBABILITY;

  /** Probability to generate a new event */
  public static double EVENT_GENERATION_PROBABILITY;

  /**
   * Every store sends on average once per period a random value of updates to other stores,
   * uniformly distributed in [1,UPDATES_PER_PERIOD]
   */
  public static int UPDATES_PER_PERIOD;

  /** Period after which no event can be generated by stores */
  public static int EVENTS_GENERATION_MAX_PERIOD;

  /** Every store sends on average once per HEARTBEAT_RATE_PERIODS a heartbeat message */
  public static int HEARTBEAT_RATE_PERIODS;

  /** Chosen protocol. Can be either OpenGossip or TransitiveInterest */
  public static String PROTOCOL;
  public static final String OPEN_GOSSIP_PROTOCOL = "OpenGossip";


  /**
   * Parameter used to configure the appearance of stores in the storeDimension display.
   */
  public static int STORE_LOAD_COLOR_SCALE;


  /** Load the parameters from the Repast simulation */
  public static void load() {
    try {
      SECURE_RANDOM = SecureRandom.getInstance("SHA1PRNG");
    } catch (NoSuchAlgorithmException e) {
      e.printStackTrace();
    }

    Parameters p = (Parameters) RunEnvironment.getInstance().getParameters();
    ScuttlebuttConfiguration.FOLLOW_PROBABILITY = p.getDouble("followProbability");
    ScuttlebuttConfiguration.UNFOLLOW_PROBABILITY = p.getDouble("unfollowProbability");
    ScuttlebuttConfiguration.BLOCK_PROBABILITY = p.getDouble("blockProbability");
    ScuttlebuttConfiguration.UNBLOCK_PROBABILITY = p.getDouble("unblockProbability");
    ScuttlebuttConfiguration.EVENT_GENERATION_PROBABILITY =
        p.getDouble("eventGenerationProbability");
    ScuttlebuttConfiguration.UPDATES_PER_PERIOD = p.getInteger("updatesPerPeriod");
    ScuttlebuttConfiguration.EVENTS_GENERATION_MAX_PERIOD =
        p.getInteger("eventsGenerationMaxPeriod");
    ScuttlebuttConfiguration.HEARTBEAT_RATE_PERIODS = p.getInteger("heartbeatRatePeriods");
    ScuttlebuttConfiguration.STORE_LOAD_COLOR_SCALE = p.getInteger("storeLoadColorScale");

    ScuttlebuttConfiguration.PROTOCOL = p.getString("protocol");
    if (PROTOCOL.equals(OPEN_GOSSIP_PROTOCOL)) {
      FOLLOW_PROBABILITY = 1;
    }
  }
}
